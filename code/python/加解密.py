
# 匯入時間模組
import time


# 啟動時間紀錄器
TimerTickSwitchOn = time.time()

# 列印標題
TitlePrompt = '''

        ***************************************
        *                                     *
        *      資料加密與解密的應用程式         *
        *                                     *
        ***************************************
'''

print()   # 空一行

print(TitlePrompt)

print()   # 空一行


#======================================================================
#
#   功能：加密流程 => 輸入資料
#   1. 讓使用者輸入一個介於0000~9999之間四位數的整數
#   2. 讓使用者輸入一個介於0~9之間一位數的整數
#
#   變數定義與解釋：
#   1. 定義 InputValue 為一整數，為使用者所輸入尚未加密的四位數整數。
#   2. 定義 Key 為一整數，為加解密時所需要用到的鍵值。
#
#======================================================================

print()   # 空一行

# 提醒使用者輸入未經加密的整數，並使用int()方法強制轉換
InputValue = int(input("請輸入一個四位數未經加密的正整數資料："))

print()   # 空一行

# 提醒使用者輸入加密的鍵值，並使用int()方法強制轉換
Key = int(input("請輸入key值(1至9之間的整數)："))

print()   # 空一行




#=======================================================================
#
#   功能：加密流程 => 取出所輸入4位整數的各個位數
#
#   變數定義與解釋：
#   1. 定義 Thousnds 為一整數，為輸入整數的千位數。
#   2. 定義 Hundreds 為一整數，為輸入整數的百位數。
#   3. 定義 Tens 為一整數，為輸入整數的十位數。
#   4. 定義 Ones 為一整數，為輸入整數的個位數。
#
#=======================================================================

# 取出輸入整數的千位數
Thousands = InputValue // 1000 #向下取整除法//運算子

# 取出輸入整數的百位數
Hundreds = (InputValue - Thousands * 1000) // 100

# 取出輸入整數的十位數
Tens = (InputValue - Thousands * 1000 - Hundreds * 100) // 10

# 取出輸入整數的個位數 
Ones = InputValue % 10




#=======================================================================
#
#   功能：加密流程 => 加密處理程序
#
#   處理步驟詳述：
#   1. 將每一個輸入位數上的數字，其值加上所輸入的key值，再除於10後
#      取其餘數，並以此餘數來取代原來的位數數字。
#   2. 將步驟(1)中完成的數字，將自左邊算起第1個(千位數)與第4個(個位數)
#      的位數數字對調，同時亦將第2個(百位數)與第3個(十位數)的位數數字對調。
#   3. 將步驟(2)中加密完成後的數字列印於主控台螢幕上。
#
#   變數定義與解釋：
#   1. 定義 EncryptedMessage 為加密後的整數訊息。
#
#=======================================================================

# 加密程序，如題目中所示

# 以下為簡單寫法，一行解決
# EncryptedMessage = ((Thousands + Key) % 10) + \
#                    (((Hundreds + Key) % 10) * 10) + \
#                    (((Tens + Key) % 10) * 100) + \
#                    (((Ones + Key) % 10) * 1000)

#+++++++++++++++++++++++++++
#       加密程序步驟1
#+++++++++++++++++++++++++++

# 將千位數加上加密鍵值之後除以10求餘數
Thousands = (Thousands + Key) % 10

# 將百位數加上加密鍵值之後除以10求餘數
Hundreds = (Hundreds + Key) % 10

# 將十位數加上加密鍵值之後除以10求餘數
Tens = (Tens + Key) % 10

# 將個位數加上加密鍵值之後除以10求餘數 
Ones = (Ones + Key) % 10 


#+++++++++++++++++++++++++++
#       加密程序步驟2
#+++++++++++++++++++++++++++

Thousands, Hundreds, Tens, Ones = Ones, Tens, Hundreds, Thousands

EncryptedMessage = Thousands * 1000 + Hundreds * 100 + Tens * 10 + Ones


#+++++++++++++++++++++++++++
#       加密程序步驟3
#+++++++++++++++++++++++++++

# 於螢幕上輸出加密後的整數數值
print('加密之後的資料：%04d' % (EncryptedMessage))     

print()   # 空一行




#======================================================================
#
#   功能：解密流程 => 輸入資料
#   1. 讓使用者輸入一個介於0000~9999之間四位數的整數
#   2. 因加密與解密使用相同鍵值，因此解密流程中使用者不需要再次輸入解
#      密鍵值
#
#   變數定義與解釋：
#   1. 定義 InputValue 為一整數，為使用者所輸入尚未加密的四位數整數。
#
#======================================================================

InputValue = int(input("請輸入一個四位數已經加密的正整數資料："))

print()   # 空一行




#=======================================================================
#
#   功能：解密流程 => 取出所輸入4位整數的各個位數
#
#   變數定義與解釋：
#   1. 定義 Thousnds 為一整數，為輸入整數的千位數。
#   2. 定義 Hundreds 為一整數，為輸入整數的百位數。
#   3. 定義 Tens 為一整數，為輸入整數的十位數。
#   4. 定義 Ones 為一整數，為輸入整數的個位數。
#
#=======================================================================

# 取出輸入整數的千位數
Thousands = InputValue // 1000 

# 取出輸入整數的百位數
Hundreds = (InputValue - Thousands * 1000) // 100

# 取出輸入整數的十位數
Tens = (InputValue - Thousands * 1000 - Hundreds * 100) // 10

# 取出輸入整數的個位數 
Ones = InputValue % 10




#=======================================================================
#
#   功能：解密流程 => 解密處理程序
#
#   處理步驟詳述：
#   1. 將每一個輸入位數上的數字，其值加上整數10再減去加密時的key值，
#      再除於10後取其餘數，並以此餘數來取代原來的位數數字。
#   2. 將步驟(1)中完成的數字，將自左邊算起第1個(千位數)與第4個(個位數)
#      的位數數字對調，同時亦將第2個(百位數)與第3個(十位數)的位數數字對調。
#   3. 將步驟(2)中解密完成後的數字列印於主控台螢幕上。
#
#   變數定義與解釋：
#   1. 定義 DecryptedMessage 為解密後的整數訊息。
#
#=======================================================================

# 解密程序，如題目中所示

# 以下為簡單寫法，一行解決
# DecryptedMessage = ((Thousands + 10 - Key) % 10) + \
#                    (((Hundreds + 10 - Key) % 10) * 10) + \
#                    (((Tens + 10 - Key) % 10) * 100) + \
#                    (((Ones + 10 - Key) % 10) * 1000)

#+++++++++++++++++++++++++++
#       解密程序步驟1
#+++++++++++++++++++++++++++

# 將千位數加上10再減去加密鍵值之後除以10求餘數
Thousands = (Thousands + 10 - Key) % 10

# 將百位數加上10再減去加密鍵值之後除以10求餘數
Hundreds = (Hundreds + 10 - Key) % 10

# 將十位數加上10再減去加密鍵值之後除以10求餘數
Tens = (Tens + 10 - Key) % 10

# 將個位數加上10再減去加密鍵值之後除以10求餘數 
Ones = (Ones + 10 - Key) % 10 


#+++++++++++++++++++++++++++
#       解密程序步驟2
#+++++++++++++++++++++++++++

Thousands, Hundreds, Tens, Ones = Ones, Tens, Hundreds, Thousands

DecryptedMessage = Thousands * 1000 + Hundreds * 100 + Tens * 10 + Ones


#+++++++++++++++++++++++++++
#       解密程序步驟3
#+++++++++++++++++++++++++++

# 於螢幕上輸出解密後的整數數值#四位整數補零
print('解密之後的資料：%04d' % (DecryptedMessage))     

print()   # 空一行


# 關閉時間紀錄器
TimerTickSwitchOff = time.time()

# 計算並記錄程式執行時間
TotalExecTimeDruationInSec = TimerTickSwitchOff - TimerTickSwitchOn

print("程式結束，本程式執行時間長度為 %f 秒" % (TotalExecTimeDruationInSec))

print()   # 空一行
input('Please enter any key to exit...')
print()   # 空一行
